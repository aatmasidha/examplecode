package com.ai.sample.db.type;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.StringWriter;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;
import java.sql.SQLException;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.hibernate.HibernateException;
//import org.hibernate.engine.SessionImplementor;
import org.hibernate.engine.spi.SessionImplementor;
//import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.usertype.UserType;

/**
 * @author aparna This class is added to handle JSON 
 * for postgres
 *
 */
public class StringJsonUserType implements UserType {

  @Override
    public int[] sqlTypes() {
        return new int[]{Types.JAVA_OBJECT};
    }

    @Override
    public Class<MyJson> returnedClass() {
        return MyJson.class;
    }

	public boolean equals(Object x, Object y) throws HibernateException {
		if (x == null) {
			return y == null;
		}
		return x.equals(y);
	}

	public int hashCode(Object x) throws HibernateException {
		return x.hashCode();
	}

	@Override
	public Object nullSafeGet(final ResultSet rs, final String[] names, final SessionImplementor session,
	                          final Object owner) throws HibernateException, SQLException {
	    final String cellContent = rs.getString(names[0]);
	    if (cellContent == null) {
	        return null;
	    }
	    try {
	        final ObjectMapper mapper = new ObjectMapper();
	        return mapper.readValue(cellContent.getBytes("UTF-8"), returnedClass());
	    } catch (final Exception ex) {
	        throw new RuntimeException("Failed to convert String to Invoice: " + ex.getMessage(), ex);
	    }
	}

	@Override
	public void nullSafeSet(final PreparedStatement ps, final Object value, final int idx,
	                        final SessionImplementor session) throws HibernateException, SQLException {
	    if (value == null) {
	        ps.setNull(idx, Types.OTHER);
	        return;
	    }
	    try {
	        final ObjectMapper mapper = new ObjectMapper();
	        final StringWriter w = new StringWriter();
	        mapper.writeValue(w, value);
	        w.flush();
	        ps.setObject(idx, w.toString(), Types.OTHER);
	    } catch (final Exception ex) {
	        throw new RuntimeException("Failed to convert Invoice to String: " + ex.getMessage(), ex);
	    }
	}

	@Override
	public Object deepCopy(final Object value) throws HibernateException {
		try {
			// use serialization to create a deep copy
	    	ByteArrayOutputStream bos = new ByteArrayOutputStream();
	    	ObjectOutputStream oos = new ObjectOutputStream(bos);
	    	oos.writeObject(value);
	    	oos.flush();
	    	oos.close();
	    	bos.close();
	    	
	    	ByteArrayInputStream bais = new ByteArrayInputStream(bos.toByteArray());
	    	return new ObjectInputStream(bais).readObject();
	    } catch (ClassNotFoundException | IOException ex) {
	        throw new HibernateException(ex);
	    }
	}

	public boolean isMutable() {
		return true;
	}

	public Serializable disassemble(Object value) throws HibernateException {
		return (String) this.deepCopy(value);
	}

	public Object assemble(Serializable cached, Object owner)
			throws HibernateException {
		return this.deepCopy(cached);
	}

	public Object replace(Object original, Object target, Object owner)
			throws HibernateException {
		return original;
	}

	
}

